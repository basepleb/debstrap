# setopt promptsubst
# autoload -Uz promptinit
# promptinit

zstyle ':zim:input' double-dot-expand yes


zmodule environment # Sets sane Zsh built-in environment options.
zmodule input # Applies correct bindkeys for input events.
zmodule utility # Utility aliases and functions. Adds colour to ls, grep and less.
zmodule git-info # Exposes git repository status information to prompts.

# zmodule ssh # Provides a convenient way to load ssh-agent.
# zmodule termtitle # Sets a custom terminal title.
# zmodule git # Provides handy git aliases and functions.

# zmodule romkatv/powerlevel10k
#zmodule homebrew

zmodule zsh-users/zsh-completions # Additional completion definitions for Zsh.
zmodule completion # completion must be sourced after zsh-users/zsh-completions
zmodule zsh-users/zsh-autosuggestions # Fish-like autosuggestions for Zsh.
zmodule zsh-users/zsh-syntax-highlighting # zsh-users/zsh-syntax-highlighting must be sourced after completion
zmodule zsh-users/zsh-history-substring-search #must be sourced after zsh-users/zsh-syntax-highlighting
zmodule history-substring-search

zmodule romkatv/powerlevel10k

zmodule ohmyzsh/ohmyzsh \
-s plugins/git/git.plugin.zsh \
-s plugins/sudo/sudo.plugin.zsh \
-s plugins/jump/jump.plugin.zsh \
#-s plugins/tmux/tmux.plugin.zsh

# Remove older command from the history if a duplicate is to be added.
setopt HIST_IGNORE_ALL_DUPS

# Set editor default keymap to emacs (`-e`) or vi (`-v`)
bindkey -e
#KEYTIMEOUT=10

# Prompt for spelling correction of commands.
setopt CORRECT

# Customize spelling correction prompt.
SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '

# Remove path separator from WORDCHARS.
WORDCHARS=${WORDCHARS//[\/]}

# Set a custom path for the completion dump file.
# If none is provided, the default ${ZDOTDIR:-${HOME}}/.zcompdump is used.
zstyle ':zim:completion' dumpfile "${ZDOTDIR:-${HOME}}/.zcompdump-${ZSH_VERSION}"

# Set a custom prefix for the generated aliases. The default prefix is 'G'.
#zstyle ':zim:git' aliases-prefix 'g'

# Append `../` to your input for each `.` you type after an initial `..`
zstyle ':zim:input' double-dot-expand yes

# Set a custom terminal title format using prompt expansion escape sequences.
# See http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Simple-Prompt-Escapes
# If none is provided, the default '%n@%m: %~' is used.
zstyle ':zim:termtitle' format '%1~'

# Customize the style that the suggestions are shown with.
# See https://github.com/zsh-users/zsh-autosuggestions/blob/master/README.md#suggestion-highlight-style
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=10'

# Set what highlighters will be used.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

# Customize the main highlighter styles.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/main.md#how-to-tweak-it
typeset -A ZSH_HIGHLIGHT_STYLES
ZSH_HIGHLIGHT_STYLES[comment]='fg=10'

# bindkey "^?" backward-delete-char
# bindkey '^H' backward-kill-word
# bindkey -M vicmd v edit-command-line

#Bind ^[[A/^[[B manually so up/down works both before and after zle-line-init
# bindkey '^[[A' history-substring-search-up
# bindkey '^[[B' history-substring-search-down

#Bind up and down keys
# zmodload -F zsh/terminfo +p:terminfo
# if [[ -n ${terminfo[kcuu1]} && -n ${terminfo[kcud1]} ]]; then
#   bindkey ${terminfo[kcuu1]} history-substring-search-up
#   bindkey ${terminfo[kcud1]} history-substring-search-down
# fi

# zsh-history-substring-search
# bindkey '^P' history-substring-search-up
# bindkey '^N' history-substring-search-down
# bindkey -M vicmd 'k' history-substring-search-up
# bindkey -M vicmd 'j' history-substring-search-down
# zstyle ':zim:input' double-dot-expand yes
